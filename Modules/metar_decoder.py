# =============================================================================#                               METAR Decoder# =============================================================================def metar_decoder(dataset):    # import package    from metar import Metar    for i in range(len(dataset)):        # METAR_origin decoder        try:            code = dataset.METAR_origin.iloc[i]            obs = Metar.Metar(code)            # The 'time' attribute is a datetime object            try:                for j in obs.time.ctime().split(' '):                    if ":" in j:                        dataset.loc[i, 'METAR_time_origin'] = j            except:                pass            # The report type attribute            dataset.loc[i, 'report_type_origin'] = obs.report_type()            # The 'temp' and 'dewpt' attributes are temperature objects            dataset.loc[i, 'temperature_origin'] = obs.temp.string("F")            dataset.loc[i, 'dew_point_origin'] = obs.dewpt.string("F")            # The wind() method returns a string describing wind observations            # which may include speed, direction, variability and gusts.            dataset.loc[i, 'wind_origin'] = obs.wind()            # The peak_wind() method returns a string describing the peak wind            # speed and direction.            dataset.loc[i, 'wind_peak_origin'] = obs.peak_wind()            # The visibility() method summarizes the visibility observation.            dataset.loc[i, 'visibility_origin'] = obs.visibility()            # The 'press' attribute is a pressure object.            dataset.loc[i, 'pressure_origin'] = obs.press.string("mb")            # The 'press' attribute is a pressure object.            dataset.loc[i, 'press_sea_level_origin'] = obs.press_sea_level.string("mb")            # The sky_conditions() method summarizes the cloud-cover observations.            dataset.loc[i, 'sky_origin'] = obs.sky_conditions()            # The remarks() method describes the remark groups that were parsed            dataset.loc[i, 'remarks_origin'] = obs.remarks()        except:            pass                # METAR_destination decoder         try:            code = dataset.METAR_destination.iloc[i]            obs = Metar.Metar(code)            # The 'time' attribute is a datetime object            dataset.loc[i, 'METAR_time_destination'] = obs.time.ctime().split(' ')[4]            # The report type attribute            dataset.loc[i, 'report_type_destination'] = obs.report_type()            # The 'temp' and 'dewpt' attributes are temperature objects            dataset.loc[i, 'temperature_destination'] = obs.temp.string("F")            dataset.loc[i, 'dew_point_destination'] = obs.dewpt.string("F")            # The wind() method returns a string describing wind observations            # which may include speed, direction, variability and gusts.            dataset.loc[i, 'wind_destination'] = obs.wind()            # The peak_wind() method returns a string describing the peak wind            # speed and direction.            dataset.loc[i, 'wind_peak_destination'] = obs.peak_wind()            # The visibility() method summarizes the visibility observation.            dataset.loc[i, 'visibility_destination'] = obs.visibility()            # The 'press' attribute is a pressure object.            dataset.loc[i, 'pressure_destination'] = obs.press.string("mb")            # The 'press' attribute is a pressure object.            dataset.loc[i, 'press_sea_level_destination'] = obs.press_sea_level.string("mb")            # The sky_conditions() method summarizes the cloud-cover observations.            dataset.loc[i, 'sky_destination'] = obs.sky_conditions()            # The remarks() method describes the remark groups that were parsed            dataset.loc[i, 'remarks_destination'] = obs.remarks()        except:            pass        dataset = dataset.loc[:,:'METAR_origin'].join([dataset.loc[:,'METAR_time_origin':'remarks_origin'],             dataset.loc[:,'METAR_destination'], dataset.loc[:,'METAR_time_destination':'remarks_destination']])        return(dataset)